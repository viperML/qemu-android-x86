#!/bin/bash
# By Sam Mulvey <archlinux@sammulvey.com>
# based on script from Chih-Wei Huang <cwhuang@linux.org.tw>
# Modified By Fernando Ayats <ayatsfer@gmail.com>
# License: GNU Generic Public License v2

# Sanity checks
if [ `id -u` -eq 0 ]; then
	echo "Don't run this as root"
	exit 1
fi
if [ -z ${HOME+x} ]; then echo "HOME isn't set!" ; exit 1 ; fi


nope() {
	echo "$1"
	exit 1
}

SYSCONFIG=/usr/share/qemu-android-x86/config
CONFIGDIR="${XDG_CONFIG_HOME:-$HOME/.config}"/qemu-android-x86
CONFIG="$CONFIGDIR"/config

# Check for config file, source
if [ -r "$CONFIG" ]; then
   . "$CONFIG"
else
    mkdir -p $CONFIGDIR
    cp $SYSCONFIG $CONFIGDIR
    nope "No config file detected, creating a new one in $CONFIGDIR/config. Please read and modify it."
fi


# Set meaningful defaults
RAM=${RAM:-4096}
CORES=${CORES:-2}
DATA=${DATA:-"$CONFIGDIR/data.img"}
DATASIZE=${DATASIZE:-16384}
CPU=${CPU:-"host"}
NETPORT=${NETPORT:-47000}
AUDIOLINE=${AUDIOLINE:-"-device intel-hda -device hda-duplex"}

# FIX: Different parameters starting from qemu >=6.1
QEMU_VERSION="$(qemu-x86_64 --version | grep -o -e '6\..*' | cut -c1-3)"
echo "Running on QEMU ${QEMU_VERSION}"
if [[ "${QEMU_VERSION}" == "6.0" ]]; then
    VGALINE=${VGALINE:-"-vga virtio -display sdl,gl=on"}
else
    VGALINE=${VGALINE:-"-device virtio-vga-gl -display sdl,gl=on"}
fi
echo "Setting VGALINE to ${VGALINE}"


# Test for system images:
IMGDIR="/var/lib/qemu-android-x86"
SYSTEMIMG=${SYSTEMIMG:-"$IMGDIR/system.img"}
INITRD=${INITRD:-"$IMGDIR/initrd.img"}
RAMDISK=${RAMDISK:-"$IMGDIR/ramdisk.img"}
KERNEL=${KERNEL:-"$IMGDIR/kernel"}

for i in "$INITRD" "$RAMDISK" "$KERNEL"; do
   if [ ! -e "$i" ]; then
       nope "System image $i isn't installed.  Check your android-x86 package."
   fi
done

if [ $DATA == "none" ]; then
	DATA_QEMULINE=""
	DATA_CMDLINE=""
elif [ -d $DATA ]; then
	echo "9p mode selected."
   DATA_QEMULINE="-virtfs local,id=data,path=${DATA},security_model=mapped-xattr,mount_tag=data"
	DATA_CMDLINE="DATA=9p"
else
	# sudo should only be needed for 9p, if KVM is set up right
	# so a data partition sparse file will always be owned by the calling user

	if [ ! -e $DATA ]; then
		if [ ! -w `dirname $DATA` ]; then
			nope "Location for $DATA doesn't exist or isn't writeable."
		fi

		truncate -s ${DATASIZE}M $DATA
		mkfs.ext4 $DATA

	elif [ ! -w $DATA ]; then
		nope "Data partition $DATA isn't writeable."
	fi

	DATA_QEMULINE="-drive index=2,if=virtio,id=data,file=${DATA},format=raw"
	DATA_CMDLINE="DATA=vdc"

fi

if [ ! -w $SYSTEMIMG ]; then
	nope "System partition $SYSTEMIMG isn't writeable. Did you reboot after adding youself to the qemu-android-x86 group?"
fi


VIDEO_CMDLINE=""
if [ ! -z ${VIDEO+x} ]; then
	VIDEO_CMDLINE="video=$VIDEO"
fi

SERIAL_QEMULINE=""
if [ ! -z ${SERIAL:+x} ]; then
	SERIAL_QEMULINE="-serial $SERIAL"

	[ $SERIAL == "mon:stdio" ] && IN_TERMINAL=1
fi


do_qemu() {

	if [ -z $BRIDGE ]; then
		NET_QEMULINE="-netdev user,id=anet0,hostfwd=tcp::$NETPORT-:5555 -device virtio-net-pci,netdev=anet0"
	else
		NET_QEMULINE="-netdev bridge,br=$BRIDGE,id=anet0 -device virtio-net-pci,netdev=anet0"
	fi

	exec qemu-system-x86_64 -enable-kvm \
	-kernel $KERNEL \
	-append "root=/dev/ram0 androidboot.selinux=permissive console=ttyS0 RAMDISK=vdb $DATA_CMDLINE $VIDEO_CMDLINE" \
	-initrd $INITRD \
	-m $RAM -smp $CORES -cpu $CPU \
	-device qemu-xhci,id=xhci0 -device usb-tablet,bus=xhci0.0 -machine vmport=off \
	-boot menu=on \
	-drive index=0,if=virtio,id=system,file=$SYSTEMIMG,format=raw,\
    -drive index=1,if=virtio,id=ramdisk,file=$RAMDISK,format=raw,readonly=on \
	$NET_QEMULINE $DATA_QEMULINE $SERIAL_QEMULINE $VGALINE $AUDIOLINE
}

while [ $NETPORT -lt 48000 ]; do
	do_qemu && break
	let $NETPORT++
done
