#!/bin/bash
# By Sam Mulvey <archlinux@sammulvey.com>
# based on script from Chih-Wei Huang <cwhuang@linux.org.tw>
# Modified By Fernando Ayats <ayatsfer@gmail.com>
# License: GNU Generic Public License v2

# Sanity checks
if [ `id -u` -eq 0 ]; then
	echo "Don't run this as root.  It'll call sudo if it needs it."
	exit 1
fi
if [ -z ${HOME+x} ]; then echo "HOME isn't set!" ; exit 1 ; fi
[ ! -z ${1+x} ] && [ $1 == "gui" ] && GUI=1 || GUI=0


# Things needed for early checks
# Package depends on these, so I won't test for them (for now.)
# But hey, someone might want to replace them with their terminal of choice or whatever.


TERMINAL="/usr/bin/urxvt"
ZENITY="/usr/bin/zenity"


nope() {
	if [ $GUI -eq 1 ]; then
		$ZENITY --width=240 --error --text="$1" --title="Android-x86 Error"
	else
		echo "$1"
	fi
	exit 1
}

SYSCONFIG=/usr/share/android-x86/config
CONFIGDIR="${XDG_CONFIG_HOME:-$HOME/.config}"/android-x86
CONFIG="$CONFIGDIR"/config

# Check for config file, source
if [ -r "$CONFIG" ]; then
   . "$CONFIG"
else
    mkdir -p $CONFIGDIR
    cp $SYSCONFIG $CONFIGDIR
    nope "No config file detected, creating a new one in $CONFIGDIR. Please read and modify it."
fi

# Set meaningful defaults
IN_TERMINAL=0
RAM=${RAM:-4096}
CORES=${CORES:-2}
DATA=${DATA:-"$CONFIGDIR/data.img"}
DATASIZE=${DATASIZE:-16384}
CPU=${CPU:-"host"}
NETPORT=${NETPORT:-47000}
VGALINE=${VGALINE:-"-device virtio-vga-gl -display sdl,gl=on"}
AUDIOLINE=${AUDIOLINE:-"-device intel-hda -device hda-duplex"}

# Test for system images:
SYSTEMIMG=${SYSTEMIMG:-"${CONFIGDIR}/system.img"}
INITRD=${INITRD:-"/usr/share/android-x86/initrd.img"}
RAMDISK=${RAMDISK:-"/usr/share/android-x86/ramdisk.img"}
KERNEL=${KERNEL:-"/usr/share/android-x86/kernel"}

for i in "$INITRD" "$RAMDISK" "$KERNEL"; do
   if [ ! -e "$i" ]; then
       nope "System image $i isn't installed.  Check your android-x86 package."
   fi
done

#QEMU=qemu-system-${QEMU_ARCH}
# Archlinux is x86_64 only
QEMU="/usr/bin/qemu-system-x86_64"
if [ ! -x $QEMU ]; then
	nope "Please install the 'qemu' package to run Android-x86."
fi

if [ $DATA == "none" ]; then
	DATA_QEMULINE=""
	DATA_CMDLINE=""
elif [ -d $DATA ]; then
	echo "9p mode selected."
   DATA_QEMULINE="-virtfs local,id=data,path=${DATA},security_model=mapped-xattr,mount_tag=data"
	DATA_CMDLINE="DATA=9p"
else
	# sudo should only be needed for 9p, if KVM is set up right
	# so a data partition sparse file will always be owned by the calling user

	if [ ! -e $DATA ]; then
		if [ ! -w `dirname $DATA` ]; then
			nope "Location for $DATA doesn't exist or isn't writeable."
		fi

		if [ $GUI -eq 1 ]; then
			$TERMINAL -title "Android-x86 Data Partition Create" -e \
				bash -c "/usr/bin/truncate -s ${DATASIZE}M $DATA && \
					/usr/bin/mkfs.ext4 $DATA && \
					echo && echo Hit enter to continue. && read"
		else
			truncate -s ${DATASIZE}M $DATA
			mkfs.ext4 $DATA
		fi

	elif [ ! -w $DATA ]; then
		nope "Data partition $DATA isn't writeable."
	fi

	DATA_QEMULINE="-drive index=2,if=virtio,id=data,file=${DATA},format=raw"
	DATA_CMDLINE="DATA=vdc"

fi

if [ ! -e $SYSTEMIMG ]; then
	if [ ! -w `dirname $SYSTEMIMG` ]; then
		nope "Location for $SYSTEMIMG doesn't exist or isn't writeable."
    fi

	if [ $GUI -eq 1 ]; then
		$TERMINAL -title "Android-x86 System Partition Copy" -e \
		bash -c "cp '/usr/share/android-x86/system.img' $SYSTEMIMG"
	else
        cp "/usr/share/android-x86/system.img" $SYSTEMIMG
	fi

elif [ ! -w $SYSTEMIMG ]; then
	nope "System partition $SYSTEMIMG isn't writeable."
fi




VIDEO_CMDLINE=""
if [ ! -z ${VIDEO+x} ]; then
	VIDEO_CMDLINE="video=$VIDEO"
fi

SERIAL_QEMULINE=""
if [ ! -z ${SERIAL:+x} ]; then
	SERIAL_QEMULINE="-serial $SERIAL"

	[ $SERIAL == "mon:stdio" ] && IN_TERMINAL=1
fi

#echo -e "CPU: $CPU\nRAM: $RAM\nCORES: $CORES\nDATA: $DATA\n"
#echo -e "DATASIZE: $DATASIZE\nSERIAL: $SERIAL\nVIDEO: $VIDEO\n"
#echo -e "VGALINE: $VGALINE\nBRIDGE: $BRIDGE"



do_qemu() {

	if [ -z $BRIDGE ]; then
		NET_QEMULINE="-netdev user,id=anet0,hostfwd=tcp::$NETPORT-:5555 -device virtio-net-pci,netdev=anet0"
	else
		NET_QEMULINE="-netdev bridge,br=$BRIDGE,id=anet0 -device virtio-net-pci,netdev=anet0"
	fi
	#echo $NET_QEMULINE\n

	DO_CMD=""

	[ $IN_TERMINAL -eq 1 ] && [ $GUI -eq 1 ] && DO_CMD+="$TERMINAL -title Android-x86_Console -e "
	DO_CMD+=$QEMU


	exec $DO_CMD -enable-kvm \
	-kernel $KERNEL \
	-append "root=/dev/ram0 androidboot.selinux=permissive console=ttyS0 RAMDISK=vdb $DATA_CMDLINE $VIDEO_CMDLINE" \
	-initrd $INITRD \
	-m $RAM -smp $CORES -cpu $CPU \
	-device qemu-xhci,id=xhci0 -device usb-tablet,bus=xhci0.0 -machine vmport=off \
	-boot menu=on \
	-drive index=0,if=virtio,id=system,file=$SYSTEMIMG,format=raw,\
    -drive index=1,if=virtio,id=ramdisk,file=$RAMDISK,format=raw,readonly=on \
	$NET_QEMULINE $DATA_QEMULINE $SERIAL_QEMULINE $VGALINE $AUDIOLINE
}

while [ $NETPORT -lt 48000 ]; do
	do_qemu && break
	let $NETPORT++
done
